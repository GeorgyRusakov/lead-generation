from aiogram import F, Router
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import (
    CallbackQuery, Message)
from redis.asyncio import Redis
from keyboard_generation import create_inline_kb, create_admin_kb
from db import add_user, get_user_by_id
from config import Config, load_config
from utils import Phone
from aiogram.methods.send_message import SendMessage


r = Redis(host='localhost', port=6379, decode_responses=True)


storage = RedisStorage(redis=r)

router = Router()


class FSMFillForm(StatesGroup):
    fill_name = State()
    fill_phone = State()
    fill_time = State()


config: Config = load_config()
admin_id = config.tg_bot.admin_ids[0]

Buttons: dict[str, str] = {
        'btn_1': 'üïõ12:00',
        'btn_2': 'üïê13:00',
        'btn_3': 'üïë14:00',
        'btn_4': 'üïí15:00',
        'btn_5': 'üïì16:00',
        'btn_6': 'üïî17:00',
        'btn_7': 'üïï18:00'
    }


@router.message(CommandStart(), StateFilter(default_state))
async def process_start_command(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id != admin_id:
        await message.answer(
            text='–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫. –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ \n'
                 '–∏ –ø–æ—Ç–æ–º —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. \n'
                 '–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /fillform –∏ –ø–æ–≥–Ω–∞–ª–∏! \n')
    else:
        await message.answer(text='–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!', reply_markup=create_admin_kb())

    #print(message.from_user.id)


@router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n\n'
             '–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã - '
             '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /fillform'
    )
    await state.clear()


@router.message(Command(commands='fillform'), StateFilter(default_state))
async def process_fillform_command(message: Message, state: FSMContext):
    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û‚úçÔ∏è')
    await state.set_state(FSMFillForm.fill_name)


@router.message(StateFilter(FSMFillForm.fill_name), F.text.replace(' ', '').isalpha())
async def process_name_sent(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n‚òéÔ∏è–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: \n\n'
                              'üìû<b>+79204403999</b>')
    await state.set_state(FSMFillForm.fill_phone)


@router.message(StateFilter(FSMFillForm.fill_name))
async def warning_not_name(message: Message):
    await message.answer(
        text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - '
             '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel')


@router.message(StateFilter(FSMFillForm.fill_phone), lambda x: x.text[1:].isdigit() and x.text[0] == '+')
async def process_age_sent(message: Message, state: FSMContext):
    try:
        phone = Phone(number=message.text).model_dump()
        values = list(phone.values())
        await state.update_data(phone_number=values[0])
        keyboard = create_inline_kb(1, **Buttons)
        await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n üïê –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞ ‚åö',
                             reply_markup=keyboard)
        await state.set_state(FSMFillForm.fill_time)
    except ValueError:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 <b>—á–∏—Å–µ–ª</b> –ø–æ—Å–ª–µ '+7' \n\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.message(StateFilter(FSMFillForm.fill_phone))
async def warning_not_age(message: Message):
    await message.answer(
        text='–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, —Å–æ –∑–Ω–∞–∫–æ–º "+" –≤–Ω–∞—á–∞–ª–µ –∏ –±–µ–∑ –ª—é–±—ã—Ö –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è\n\n'
             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
             '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )


@router.callback_query(StateFilter(FSMFillForm.fill_time),
                   F.data.in_(list(Buttons.keys())))
async def process_education_press(callback: CallbackQuery, state: FSMContext, bot):
    await state.update_data(time=Buttons[callback.data])
    id_user = callback.from_user.id
    data = await state.get_data()
    await add_user(id_user, data['name'], data['phone_number'], data['time'])
    await state.clear()

    await callback.message.edit_text(
        text='–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n'
             '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π '
             '–∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /showdata'

    )
    #await bot.send_message(chat_id=682402380, text='–ö—Ç–æ-—Ç–æ –∑–∞–ø–æ–ª–Ω–∏–ª –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ!')


@router.message(StateFilter(FSMFillForm.fill_time))
async def warning_not_education(message: Message):
    await message.answer(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '
             '–∫–æ–º–∞–Ω–¥—É /cancel'
    )


@router.message(Command(commands='showdata'), StateFilter(default_state))
async def process_showdata_command(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–Ω–∫–µ—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ "–±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    user_id = message.from_user.id
    user = await get_user_by_id(user_id)
    if user:
        await message.answer(
            text=f'–ò–º—è: {user["username"]}\n'
                 f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user["phone_number"]}\n'
                 f'–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: {user["time"]}\n'

        )
    else:
        # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –Ω–µ—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å
        await message.answer(
            text='–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∫–µ—Ç—É. –ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å - '
            '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /fillform'
        )


